// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	"time"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// SecretSpec defines the desired state of Secret
type SecretSpec struct {
	ClientRequestToken *string `json:"clientRequestToken,omitempty"`
	Description        *string `json:"description,omitempty"`
	KMSKeyID           *string `json:"kmsKeyID,omitempty"`
	// +kubebuilder:validation:Required
	Name         *string `json:"name"`
	SecretBinary []byte  `json:"secretBinary,omitempty"`
	SecretString *string `json:"secretString,omitempty"`
	Tags         []*Tag  `json:"tags,omitempty"`
}

// SecretStatus defines the observed state of Secret
type SecretStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	Conditions        []*ackv1alpha1.Condition     `json:"conditions"`
	VersionID         *string                      `json:"versionID,omitempty"`
	CreatedDate       *time.Time                   `json:"createdDate,omitempty"`
	OwningService     *string                      `json:"owningService,omitempty"`
	RotationEnabled   *bool                        `json:"rotationEnabled"`
	RotationLambdaARN *ackv1alpha1.AWSResourceName `json:"rotationLambdaARN,omitempty"`
}

// Secret is the Schema for the Secrets API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type AWSSecret struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecretSpec   `json:"spec,omitempty"`
	Status            SecretStatus `json:"status,omitempty"`
}

// SecretList contains a list of Secret
// +kubebuilder:object:root=true
type AWSSecretList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AWSSecret `json:"items"`
}

func init() {
	SchemeBuilder.Register(&AWSSecret{}, &AWSSecretList{})
}
